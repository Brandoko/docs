"use strict";(self.webpackChunk_electron_react_boilerplate_site=self.webpackChunk_electron_react_boilerplate_site||[]).push([[414],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3788:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(7462),o=n(3366),l=(n(7294),n(3905)),i=["components"],a={id:"electron-store",title:"Electron Store",sidebar_label:"Electron Store"},c=void 0,s={unversionedId:"electron-store",id:"electron-store",title:"Electron Store",description:"Using electron-store with electron-react-boilerplate",source:"@site/docs/electron-store.md",sourceDirName:".",slug:"/electron-store",permalink:"/docs/electron-store",editUrl:"https://github.com/electron-react-boilerplate/site/edit/main/docs/electron-store.md",tags:[],version:"current",frontMatter:{id:"electron-store",title:"Electron Store",sidebar_label:"Electron Store"},sidebar:"docs",previous:{title:"Continuous Integration (CI)",permalink:"/docs/ci"},next:{title:"Internals",permalink:"/docs/internals"}},p=[{value:"Using <code>electron-store</code> with <code>electron-react-boilerplate</code>",id:"using-electron-store-with-electron-react-boilerplate",children:[{value:"1. Install <code>electron-store</code>",id:"1-install-electron-store",children:[],level:3},{value:"2. Electron IPC Configuration",id:"2-electron-ipc-configuration",children:[],level:3},{value:"3. Add typings",id:"3-add-typings",children:[],level:3}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"using-electron-store-with-electron-react-boilerplate"},"Using ",(0,l.kt)("inlineCode",{parentName:"h2"},"electron-store")," with ",(0,l.kt)("inlineCode",{parentName:"h2"},"electron-react-boilerplate")),(0,l.kt)("h3",{id:"1-install-electron-store"},"1. Install ",(0,l.kt)("inlineCode",{parentName:"h3"},"electron-store")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install electron-store\n")),(0,l.kt)("h3",{id:"2-electron-ipc-configuration"},"2. Electron IPC Configuration"),(0,l.kt)("p",null,"Electron strongly recommends disabling node integration in the renderer process, which is now the default. IPC is required to securely pass values between the main and renderer processes. You will have to add IPC event handlers which set and get ",(0,l.kt)("inlineCode",{parentName:"p"},"electron-store")," through the ",(0,l.kt)("inlineCode",{parentName:"p"},"preload")," script."),(0,l.kt)("p",null,"Add the following event handlers to your preload script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main/preload.js"',title:'"src/main/preload.js"'},"const { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electron', {\n  store: {\n    get(val) {\n      return ipcRenderer.sendSync('electron-store-get', val);\n    },\n    set(property, val) {\n      ipcRenderer.send('electron-store-set', property, val);\n    },\n    // Other method you want to add like has(), reset(), etc.\n  },\n  // Any other methods you want to expose in the window object.\n  // ...\n});\n")),(0,l.kt)("p",null,"Add event listeners in your main process:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main/main.ts"',title:'"src/main/main.ts"'},"import Store from 'electron-store';\n\nconst store = new Store();\n\n// IPC listener\nipcMain.on('electron-store-get', async (event, val) => {\n  event.returnValue = store.get(val);\n});\nipcMain.on('electron-store-set', async (event, key, val) => {\n  store.set(key, val);\n});\n")),(0,l.kt)("h3",{id:"3-add-typings"},"3. Add typings"),(0,l.kt)("p",null,"Add the following type defs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/renderer/App.tsx"',title:'"src/renderer/App.tsx"'},"// ...\n\ndeclare global {\n  interface Window {\n    electron: {\n      store: {\n        get: (key: string) => any;\n        set: (key: string, val: any) => void;\n        // any other methods you've defined...\n      };\n    };\n  }\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Now, you can set and get ",(0,l.kt)("inlineCode",{parentName:"p"},"electron-store")," in your renderer processes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/renderer/App.tsx"',title:'"src/renderer/App.tsx"'},"// ...\n<button\n  onClick={() => {\n    window.electron.store.set('foo', 'bar');\n    // or\n    console.log(window.electron.store.get('foo'));\n  }}\n>\n  Click Me!\n</button>\n")))}u.isMDXComponent=!0}}]);